---
import ThemeToggle from "./ThemeToggle.astro"
import LanguageToggle from "./LanguageToggle.astro"

const navItems = [
  { title: "Experience", titleEs: "Experiencia", label: "experience", url: "/#experience" },
  { title: "Projects",   titleEs: "Proyectos",   label: "projects",   url: "/#projects" },
  { title: "About Me",   titleEs: "Sobre m√≠",    label: "about-me",   url: "/#about-me" },
  { title: "Contact",    titleEs: "Contacto",    label: "contact",    url: "mailto:samironcal@gmail.com" },
]

const lang = typeof window !== "undefined" ? (localStorage.getItem("lang") || "en") : "en"
---

<header class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2">
  <nav class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center">
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}
        >
          {lang === "es" ? link.titleEs : link.title}
        </a>
      ))
    }
    <ThemeToggle />
    <LanguageToggle />
  </nav>
</header>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navAnchors = document.querySelectorAll("header nav a");

    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navAnchors.forEach((item) => {
            const target = entry.target; // no TS cast in inline scripts
            if (item.getAttribute("aria-label") === target.id) {
              item.classList.add("text-yellow-500");
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => observer.observe(section));

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => observer.observe(section));
      }
    };
  });
</script>


<style>
  nav {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }
  @keyframes nav-shadow {
    to { @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10; }
  }
</style>
